from llama_cpp import Llama
from query import search_chunks

# Path to your local GGUF-quantized LLM model
MODEL_PATH = "models/mistral-7b-instruct-v0.1.Q5_K_M.gguf"

# Initialize the LLM instance with inference settings
llm = Llama(
    model_path=MODEL_PATH,  # Path to GGUF model file
    n_ctx=2048,  # Maximum context window size
    n_threads=8,  # Number of CPU threads used for inference
    n_gpu_layers=0,  # Number of layers to offload to GPU (0 = CPU only)
)


def build_prompt(query, chunks):
    # Construct a formatted context string from the top retrieved chunks
    context = "\n\n".join(
        f"File: {chunk['file']} | Chunk ID: {chunk['chunk_id']}\n{chunk['preview']}"
        for chunk in chunks
    )

    # Define the system instructions given to the LLM
    system_prompt = (
        "You are a helpful clinical assistant specialized in CVICU nursing policies. "
        "Use the provided policy excerpts to answer the user's question as accurately and completely as possible. "
        "Only use relevant clinical information such as administration, dosage, monitoring, adverse effects, precautions, and indications. "
        "Ignore any content related to legal disclaimers, institutional boilerplate, headers, page numbers, or footnotes. "
        "If the answer is not directly stated, use your best clinical judgment based on the context."
    )

    # Combine system instructions, context, and user query into one prompt
    prompt = f"<s>[INST] {system_prompt}\n\nContext:\n{context}\n\nQuestion: {query}\n\nAnswer: [/INST]"
    return prompt


def generate_answer(query):
    # Retrieve top-matching chunks for the query
    top_chunks = search_chunks(query)

    # Format the prompt for LLM inference
    prompt = build_prompt(query, top_chunks)

    print("\nüß† Prompt Sent to LLM:\n")
    print(prompt)

    # Generate a response using the LLM
    output = llm(prompt, max_tokens=300, temperature=0.7)

    # Extract the model's generated answer text
    answer = (
        output.get("choices", [{}])[0]
        .get("text", "[No response generated by model]")
        .strip()
    )

    # If answer is empty, provide fallback message
    if not answer:
        answer = "[‚ö†Ô∏è Model returned no answer. You may need to increase context, check input, or review model behavior.]"

    # Print raw model response and metadata
    print("\nüîß Raw LLM Output:")
    print(output)

    # Show which source chunks were used for context
    print("\nüìö Sources:")
    for chunk in top_chunks:
        print(f"- {chunk['file']} (Chunk ID: {chunk['chunk_id']})")

    # Print final answer to the console
    print("\nü©∫ Generated Answer:\n")
    print(answer)


# Interactive CLI loop for asking clinical questions
if __name__ == "__main__":
    while True:
        query = input("\nAsk a clinical question (or type 'exit'): ")
        if query.lower() == "exit":
            break
        generate_answer(query)
